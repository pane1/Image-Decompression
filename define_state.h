`ifndef DEFINE_STATE

// This defines the states
typedef enum logic[4:0]{
	S_IDLE,
	S_ENABLE_UART_RX,
	S_WAIT_UART_RX,
	milestone1,
	milestone2
} top_state_type;

typedef enum logic[1:0]{
	S_RXC_IDLE,
	S_RXC_SYNC,
	S_RXC_ASSEMBLE_DATA,
	S_RXC_STOP_BIT
} RX_Controller_state_type;

typedef enum logic[2:0]{
	S_US_IDLE,
	S_US_STRIP_FILE_HEADER_1,
	S_US_STRIP_FILE_HEADER_2,
	S_US_START_FIRST_BYTE_RECEIVE,
	S_US_WRITE_FIRST_BYTE,
	S_US_START_SECOND_BYTE_RECEIVE,
	S_US_WRITE_SECOND_BYTE
} UART_SRAM_state_type;

typedef enum logic[3:0]{
	S_VS_WAIT_NEW_PIXEL_ROW,
	S_VS_NEW_PIXEL_ROW_DELAY_1,
	S_VS_NEW_PIXEL_ROW_DELAY_2,
	S_VS_NEW_PIXEL_ROW_DELAY_3,
	S_VS_NEW_PIXEL_ROW_DELAY_4,
	S_VS_NEW_PIXEL_ROW_DELAY_5,
	S_VS_FETCH_PIXEL_DATA_0,
	S_VS_FETCH_PIXEL_DATA_1,
	S_VS_FETCH_PIXEL_DATA_2,
	S_VS_FETCH_PIXEL_DATA_3
} VGA_SRAM_state_type;

typedef enum logic[6:0] {
	S_m1_IDLE,
	S_LEAD_IN_2,
	S_LEAD_IN_3,
	S_LEAD_IN_4,
	S_LEAD_IN_5,
	S_LEAD_IN_6,
	S_LEAD_IN_7,
	S_LEAD_IN_8,
	S_LEAD_IN_9,
	S_LEAD_IN_10,
	S_LEAD_IN_11,
	S_LEAD_IN_12,
	S_LEAD_IN_13,
	S_LEAD_IN_14,
	S_TRANSITION_1,
	S_TRANSITION_2,
	S_TRANSITION_2_5,
	S_TRANSITION_3,
	S_TRANSITION_3_5,
	S_TRANSITION_4,
	S_TRANSITION_5,
	S_TRANSITION_6,
	S_TRANSITION_7,
	S_COMMONE_CASE_1,
	S_COMMONE_CASE_2,
	S_COMMONE_CASE_3,
	S_COMMONE_CASE_4,
	S_COMMONE_CASE_5,
	S_COMMONE_CASE_6,
	S_COMMONE_CASE_7,
	S_LEAD_OUT_1,
	S_LEAD_OUT_2,
	S_LEAD_OUT_3,
	S_LEAD_OUT_4,
	S_LEAD_OUT_5,
	S_LEAD_OUT_6,
	S_LEAD_OUT_7,
	S_FINAL_1,
	S_FINAL_2,
	S_FINAL_3,
	S_FINAL_4,
	C_BLANK,
	C_LEAD_IN_9,
	C_LEAD_IN_11,
	C_LEAD_IN_12,
	C_LEAD_IN_13,
	C_LEAD_IN_14,
	C_LEAD_IN_15,
	C_TRANSITION_2,
	C_TRANSITION_3,
	C_TRANSITION_4,
	C_TRANSITION_5,
	C_TRANSITION_6,
	C_TRANSITION_7,
	C_COMMON_CASE_2,
	C_COMMON_CASE_3,
	C_COMMON_CASE_4,
	C_COMMON_CASE_5,
	C_COMMON_CASE_6,
	C_COMMON_CASE_7,
	C_LEAD_OUT_2,
	C_LEAD_OUT_3,
	C_LEAD_OUT_4,
	C_LEAD_OUT_5,
	C_LEAD_OUT_6,
	C_LEAD_OUT_7
} state_type;

typedef enum logic [6:0] {
    S_m2_IDLE,
    S_LEAN_IN_FETCH_1,
    S_LEAN_IN_FETCH_2,
    S_LEAN_IN_FETCH_3,
    S_M2_TRANSITION_1,
    S_M2_TRANSITION_2,
    S_M2_TRANSITION_3,
    S_CT_1,
    S_CT_2,
    S_CT_3,
    S_CT_4,
    S_M2_TRANSITION_11,
    S_M2_TRANSITION_22,
    S_M2_TRANSITION_33,
    S_CS_FETCH_1,
    S_CS_FETCH_2,
    S_CS_FETCH_3,
    S_CS_FETCH_4,
    S_M2_TRANSITION_111,
    S_M2_TRANSITION_222,
    S_M2_TRANSITION_333,
    S_WS_1,
    C_M2_BLANK,
    C_CT_1,
    C_CT_2,
    C_CT_3,
    C_CT_4,
    C_TRANSITION_33,
    C_CS_FETCH_1,
    C_CS_FETCH_2,
    C_CS_FETCH_3,
    C_CS_FETCH_4
} m2_state_type;

`define DEFINE_STATE 1
`endif
